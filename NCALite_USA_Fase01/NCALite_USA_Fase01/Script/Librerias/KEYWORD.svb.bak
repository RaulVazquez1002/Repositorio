'USEUNIT COMMON
'USEUNIT KERNEL

Dim KEY

If not isobject(KEY) then
  Set KEY = New Class_KEY
End if

Class Class_KEY
	
	Private WND
	Private obj
	Dim Tabs

	public Function getInstance
		set getInstance = new Class_KEY
	end Function

	Public sub msj
        Log.Message "keywods"
  end sub 

	Private Sub Class_Initialize
		tabDict
    'set WND = TNT.Process("middlewareClientWin32")
	End Sub

'  	Public Sub Cerrar
'    	For i=1 To 10
'    		'Validar si existe el proceso
'    		If Sys.WaitProcess("MiddlewareClientWin32").Exists Then
'    			'Si existe el proceso
'    			'Matar el proceso
'    			TNT.Process("MiddlewareClientWin32").pObj.Close
'    		Else
'    			'No existe el proceso
'    			Exit For
'    		End If
'    	Next
'    End Sub
  
  public sub Cerrar
    dim isClosed 
    set mdw = sys.FindChild("ProcessName","MiddlewareClientWin32")
    
    while mdw.Exists
      mdw.close
      isClosed = mdw.WaitProperty("Exists", False)
      if not isClosed then
        mdw.terminate
      end if
      set mdw =  Sys.FindChild("ProcessName", "MiddlewareClientWin32")
    Wend
  end sub

	'------------------------------------------------------------------'	
	'##### KEYWORDS ###'
	'------------------------------------------------------------------'

	'Hace login en la aplicacion de Middleware'
	Public Sub Loginvf
  
		FunctionAction = "Inicio de sesion en middleware"
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = "-"

		Dim strUsuario  : strUsuario  = Project.Variables.LoginData.Value("Usuario")
		Dim strClave    : strClave    = Project.Variables.LoginData.Value("Password")
		Dim strAmbiente : strAmbiente = Project.Variables.LoginData.Value("URL")
    
		Cerrar
     
		'Runs the "MiddlewareClientWin32" tested application.
    Delay(10000)
		Call TestedApps.MiddlewareClientWin32.Run
		Delay(10000)
    
		TNT.Process("MiddlewareClientWin32").WPFObject("cmbUsuario").Text = strUsuario
		TNT.Process("MiddlewareClientWin32").WPFObject("txtClave").wText = strClave
		TNT.Process("MiddlewareClientWin32").WPFObject("cmbAmbiente").Text = strAmbiente
		TNT.Process("MiddlewareClientWin32").WPFObject("LoginButtom").Click
    
    Delay(35000)
		Log.Message FunctionAction & " [Exitoso]"    

    for i = 0 to 20
    Delay(15000)
    if Sys.Process("MiddlewareClientWin32").Exists then       
        Delay(5000)
        set WND = TNT.Process("MiddlewareClientWin32")
        if not WND.WaitObject("WinFormsControlName:=GeneralBrowser,Description:=Operaciones,Enabled:=True,CanSelect:=True,Visible:=True",UTIL.getTimeOut()) is Nothing then	
    			
  			if WND.WaitObject("WinFormsControlName:=GeneralBrowser,Description:=Operaciones,Enabled:=True",10) is nothing then Log.Error "ERROR: [No se encontro pestaña OPERACIONES]"
          set obj = WND.FindObject("ClrClassName:=GeneralBrowser,Description:=Operaciones,Enabled:=True")
          obj.click

  			if WND.WaitObject("ClrClassName:=PanelItem,Description:=Nuevo Ciclo Activo",10) is nothing then log.error "ERROR: [No se encontro pestaña CICLO ACTIVO]"
          set obj = WND.WaitObject("ClrClassName:=PanelItem,Description:=Nuevo Ciclo Activo",10)
    			obj.click
      
  			FunctionStatus = "[Exitoso]"
  			Log.Message "Navegacion a ciclo Activo: " & FunctionStatus
          
  		else
  			FunctionStatus = "[ ERROR ] Objeto: GeneralBrowser no fue encontrado."
  			Log.Warning FunctionStatus
  			Exit Sub
  		end if 
        
  	    Delay(1000)  
      exit for
    Else
      Log.Warning "WARNING: no se encontro PrincipalWindow; intento N:"&i  
    end if
      
    if i = 20 then
      log.Error "ERROR: No se encontro principalWindow"
    end if
      
   Next
          
	End Sub
	
	public sub MaximizeOperation
  
		FunctionAction = "Se maximiza la pantalla de la operacion Actual"
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = "-"

		if TNT.Process("MiddlewareClientWin32").Node("WinFormsControlName:=panelTop").WaitObject("WinFormsControlName:=buttonSuperMaximize",300) is nothing then
			FunctionStatus = "[Error]"
			Log.Warning FunctionAction &": "& FunctionStatus
			Exit Sub
		else
			TNT.Process("MiddlewareClientWin32").Node("WinFormsControlName:=panelTop").FindObject("WinFormsControlName:=buttonSuperMaximize").Click
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction &": "& FunctionStatus
		end if			
    
	end Sub 
	
	'Navega entre las tabs del menu principal'
	'Note: Refactorizar.'
	Public Sub Nav_Tabs(Tab, Item)
		FunctionAction = "Navegacion del tabulador principal de middleware"
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = "-"
    		
		Delay 30000
		Sys.Refresh
		if(Tabs.exists(UCASE(Tab))) then
		  if TNT.Process("MiddlewareClientWin32").WaitObject("ClrFullClassName:=OT.Library.Desktop.Controls.MenuItem",10)is nothing then Log.Error  "Objeto no encontrado"
		  TNT.Process("MiddlewareClientWin32").Window("HwndSource: PrincipalWindow").FindObject("ClrFullClassName:=OT.Library.Desktop.Controls.MenuTab,Index:=1").SelectTab Tabs(UCASE(Tab))
		end if
		
    Sys.Refresh
		if(Tabs.exists(UCASE(Item))) then
			if TNT.Process("MiddlewareClientWin32").WaitObject("ClrFullClassName:=OT.Library.Desktop.Controls.MenuItem",10)is nothing then
				FunctionStatus = "Error: Nav_Tabs : ClrFullClassName:=OT.Library.Desktop.Controls.MenuItem"
				Log.Warning FunctionStatus
				
				Exit Sub
			end if	
			TNT.Process("MiddlewareClientWin32").Window("HwndSource: PrincipalWindow").FindObject("ClrFullClassName:=OT.Library.Desktop.Controls.MenuItem").SelectItem Tabs(UCASE(Item))
		end if
		FunctionStatus = "[ Exitoso ]"
		Log.Message FunctionAction & ": " & FunctionStatus,,,,Sys.Desktop.ActiveWindow
		
	End Sub
  
	'Navega entre las operaciones del menu lateral.'
	public Sub Nav_Operacion(strItemTab,strDLVI)
		FunctionAction = "NavegaciÃ³n de Operaciones de Middleware"
		FunctionValue = strDLVI
		FunctionOutput = "-"
		FunctionString = "ClrClassName:=ItemTab,Wndcaption:="&strItemTab

		setPrincipalWindow
    WND.findObject(FunctionString).setFocus
    'get_selected
		if WND.findObject(FunctionString).Enabled then
			set obj = WND.FindObject(FunctionString)
      obj.setFocus
			obj.click
    Else
    
		end if 
		
		FunctionString = "ClrClassName:=DesktopListViewItem,Text:=" & strDLVI
		if not WND.WaitObject(FunctionString,UTIL.getTimeOut) is Nothing then
			set obj = WND.FindObject(FunctionString)
      Delay(3000)
      obj.setFocus
			obj.click
			FunctionStatus = " [Exitoso] "
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionStatus & ": " & FunctionAction
			Exit Sub			
		end if 
	End Sub


	'Navega entre las alertas del menu lateral.'
	public sub Nav_Alertas(strDLVI)
			
		FunctionAction = "Se dio click al item: " & strDLVI
		FunctionValue = strDLVI
		FunctionOutput = ""
		FunctionString = "ClrClassName:=DesktopListViewItem,WndCaption:=" & strDLVI

		setPrincipalWindow

		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.findObject(FunctionString)
			obj.click
			FunctionStatus = " [Exitoso] "
			Log.Message FunctionAction & ": " & FunctionStatus

		else
			FunctionStatus = "[Error] : No se encontro el Item en Alertas"
			Log.Warning FunctionStatus
		end if
	end sub
	
	'Hace un click en el grid seleccionado por la columna y su opcion'
  'gridControl "ClrClassName:=GridControl,Index:=??","click en la columna fecha","Fecha de transmisión","20/02/2021 21:14:17" 
	public Function GridControl(objProperty,strAction,strColumn,strOption)
  
    dim find: find = true
		FunctionAction = strAction
		FunctionValue = strOption
		FunctionOutput = "-"
		FunctionString = objProperty

		if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
			set obj = WND.FindObject(FunctionString)

			columns = obj.wColumnCount - 1
			rows = obj.wRowCount -1

			For i = 0 To columns

				if Trim(obj.wColumn(i)) = Trim(strColumn) then

					For k = 0 To rows
				          
						if Trim(obj.wValue(k,strColumn)) = Trim(strOption)then
							obj.clickCell k,strColumn
							FunctionStatus = "[Exitoso]"
							Log.Message FunctionAction & ": " & FunctionStatus
              find = True
              GridControl = find
							Exit Function		
						end if

					if k = rows then
						FunctionStatus = "GridControl: Valor no encontrado"
 						Log.Message FunctionStatus
            find = False
            GridControl = find
						Exit Function
					end if

					Next
				end if
			if i = columns then 
				FunctionStatus =  "GridControl: Columna no encontrada" 
				Log.Warning FunctionStatus
				Exit Function
			end if	
			Next
		end if
	End Function
	
	'Recupera un valor dentrao de un grid dado por sus parametros.
	public Function GetGridControl(objProperty,strAction,strColumn,strOption)
    
    Log.Message "1"
		
    FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty

		if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then

      set obj = WND.FindObject(FunctionString)
   
      
			columns = obj.wColumnCount - 1
			rows = obj.wRowCount - 1
     
      
			For i = 0 To columns
				
				if obj.wColumn(i) = strColumn then
					'obj.clickCell strOption,i
					GetGridControl = obj.wValue(strOption,i)
					FunctionOutput = obj.wValue(strOption,i)
					FunctionStatus = "[Exitoso]"
					Log.Message FunctionAction & ": " & FunctionStatus
					Exit Function		
				end if
			if i = columns then 
				FunctionStatus =  "GridControl: Columna no encontrada" 
				Log.Warning FunctionStatus
				Exit Function
			end if
				
			Next
		end if
	End Function
  
  	'Recupera un valor dentrao de un grid dado por sus parametros.
	public Sub clickIndiceGridControl(objProperty,strAction,strColumn,indice)
    		
    FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty

		if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
		
      set obj = WND.FindObject(FunctionString)
      
			columns = obj.wColumnCount - 1
			rows = obj.wRowCount - 1
      Log.Message "4"
      
			For i = 0 To columns
				
				if obj.wColumn(i) = strColumn then
					obj.clickCell indice,i
					Log.Message FunctionAction & ": " & FunctionStatus
					Exit Sub		
				end if			
			Next
		end if
	End Sub
  
	
	'Hace click a un valor dentro de un listBox dado por parametro.'
	Public sub ListBox(objProperty,strAction,strItem)
	
		FunctionAction = strAction & "de: " & objProperty
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty
		
		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.FindObject(FunctionString)
			obj.ClickItem strItem
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionAction & ": " & FunctionStatus
		end if
	end sub 

	'Hace un click en un elemento ListBox dentro de un DropDownList dado por parametros.
	Public Sub DropDownList(objProperty,strItem,indice)

		FunctionAction = "Desplegar el dropDownList: " & objProperty
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty
		
		if not WND.WaitObject(FunctionString,UTIL.getTimeOut) is Nothing then
    
      If TRIM( WND.WaitObject(FunctionString,UTIL.getTimeOut).Text) = TRIM(StrItem)Then 
        Log.Message "Opción deseada ya se encuentra seleccionada"
        exit sub
      End IF 
      
			if not WND.WaitNode(FunctionString,200).WaitObject("ClrClassName:=PictureBox,Enabled:=True",UTIL.getTimeOut) is Nothing then
				set obj = WND.Node(FunctionString).FindObject("ClrClassName:=PictureBox,Enabled:=True")
				obj.click
				FunctionStatus = "[Exitoso]"
				Log.Message FunctionAction & ": " & FunctionStatus
			end if
		else
			FunctionStatus "Error: PictureBox no encontrado"
			Log.Warning FunctionStatus			
			Exit Sub
      
		End if

		FunctionAction = "Seleccionar el item: " & strItem 
		FunctionValue = strItem
		FunctionOutput = "-"
		FunctionString = "ClrClassName:=ListBox,CanSelect:=True,Index:=" & indice
     log.Message "Llega aqui" 
     Sys.Refresh
     Delay 1000
    
		if not WND.WaitObject(FunctionString,UTIL.getTimeOut) is Nothing then
			set obj = WND.FindObject(FunctionString)			
      obj.setFocus	
			obj.SelectItem strItem
      'obj.ClickItem strItem
			FunctionStatus = "[ Exitoso ]"
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = " Error: ListBox no encontrado"
			Log.Message FunctionStatus
						
			Exit Sub
		end if
	End Sub

	'Hace un click a un elemento Grid control dentro de un MdwComboBoxNew dado por parametros.
	Public sub MdwComboBoxNew(objProperty,strColumn,strOption,indexPnl)
	    
		FunctionAction = "Despliegue del MdwComboBoxNew: "
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = ObjProperty
		
		if not WND.WaitObject(FunctionString,UTIL.getTimeOut) is Nothing then

			if not WND.Node(FunctionString).WaitObject("ClrClassName:=PictureBox,Enabled:=True",UTIL.getTimeOut) is Nothing then
				set obj = WND.Node(FunctionString).FindObject("ClrClassName:=PictureBox,Enabled:=True")
				obj.click
				FunctionStatus = "[Exitoso]"
				Log.Message FunctionAction & ": " & FunctionStatus
			end if
		else
			FunctionStatus = "MdwComboNew: Picture/PicImage no encontrado"
			Log.Warning FunctionStatus
			Exit Sub
		end if

		
		'-----------------------------------------------------------------------------------'
		'Validacion del despliegue del GridControl fuera de principalWindow'
		'-----------------------------------------------------------------------------------'


		FunctionAction = "Validar y Seleccionar el item: " & strOption
		FunctionValue = strOption
		FunctionOutput = "-"
		FunctionString = "ClrClassName:=GridControl,Enabled:=True"
  
		set tmpObj = WND

		KEY.setNodeFromProcess("WinFormsControlName:=pnlData,Index:="& indexPnl &"")
    Delay 2000
    Sys.Refresh
    Delay 5000


		if not (WND.waitObject("ClrClassName:=GridControl,Visible:=True",UTIL.getTimeOut)) is nothing then
  
			set obj = WND.FindObject("ClrClassName:=GridControl,Visible:=True")
			bul = False
      log.Message "Numero de registros" &obj.wRowCount
			For i = 0 To obj.wRowCount
				For k = 1 To obj.wColumnCount
      '  log.Message"Planta: "&obj.wValue((i),strColumn)
         log.Message "Columna: "&obj.wValue(i,strColumn)
					if TRIM(obj.wValue(i,strColumn)) = TRIM(strOption) then
           
						obj.clickCell i,strColumn
						FunctionStatus = "[Exitoso]"
						Log.Message FunctionAction & ": " & FunctionStatus	
						bul = True
						Exit for
					End if 
				Next
				If bul Then Exit For
			Next
		else
			FunctionStatus = "[Error]:"
			Log.Warning FunctionAction & ": " & FunctionStatus
			set WND = tmpObj
			Exit Sub	 
		end if
       
		set WND = tmpObj
    FunctionString = ""
	End Sub

	'Hace un click dentro de una celda de un GridControl que contiene un "ComboBoxEdit" y selecciona la opcion del combo.
	public sub Grid_ComboEdit(objProperty,strColumn,strCombo)

		FunctionAction = "Hacer click a la celda 0 de la columna: " & strColumn
		FunctionValue = strColumn
		FunctionOutput = "-"
		FunctionString = objProperty
    set WND = TNT.Process("MiddlewareClientWin32").window("HwndSource: principalWindow")
		if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
			set obj = WND.FindObject(FunctionString)

			obj.clickCell 0,strColumn
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
			

			FunctionAction = "Desplegar, validar y hacer un click al item: " & strCombo
			FunctionValue = strCombo
			FunctionOutput = "-"
			FunctionString = objProperty

			if not (WND.Node(FunctionString).waitObject("ClrClassName:=ComboBoxEdit",100)) is nothing then
				set obj = WND.Node(FunctionString).FindObject("ClrClassName:=ComboBoxEdit")

				For i=0 To obj.wItemCount - 1
					if strCombo = obj.wItem(i) then
						obj.set_SelectedIndex i
            
						FunctionStatus = "[Exitoso]"
						Log.Message FunctionAction & ": " & FunctionStatus
						Exit Sub
					end if 
				Next
			else
				FunctionStatus = "[Error]: "
				Log.Warning FunctionAction & ": " & FunctionStatus
				
				Exit Sub 
			end if
		else
			FunctionStatus = "[Error]: "
			Log.Warning FunctionAction & ": " & FunctionStatus
		
			Exit Sub 
		end if
	end sub
	
	'Hace click en el dia dado por parametro dentro de un mdwDateBox
	' Reparar el metodo.'
	public sub MdwDateBox(objProperty)

		FunctionAction = "Desplegar el MdwDateBox: " & objProperty
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty

		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is Nothing then

			if not WND.Node(FunctionString).WaitObject("ClrClassName:=PictureBox,Enabled:=True",UTIL.getTimeOut) is nothing then 
				set obj = WND.Node(FunctionString).FindObject("ClrClassName:=PictureBox,Enabled:=True")
				obj.click
				FunctionStatus = "[Exitoso]"
				Log.Message FunctionAction & ": " & FunctionStatus
			end if 
		else
			FunctionStatus = "Error : MdwDateBox no encontrado"
			Log.Warning FunctionStatus
			Exit Sub
		end if 

		FunctionAction = "Validacion y selección del dia"
		FunctionValue = strDia
		FunctionOutput = "-"
		FunctionString = "ClrClassName:=myButton,WndCaption:=" & aqDateTime.GetDay(aqDateTime.Today())

		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.FindObject(FunctionString)
			obj.DblClick
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus			
		else
			FunctionStatus = "Error en el despliegue del mdwDateBox"
			
			Log.Warning FunctionStatus
			Exit Sub
		end if 
	end sub

	public sub Screenshot(strMessage)
		Log.Message strMessage,,,,Sys.Desktop.ActiveWindow
	end sub
	
  Public Function existObj (objProperty,strAction,timeOut)
    
    FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty
		
		if WND.waitObjExist(FunctionString,timeOut) then
			FunctionStatus = "[Existoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
			existObj = True
		else
			FunctionStatus = "[No Encontrado] "
			Log.Message FunctionAction & ": " & FunctionStatus
			existObj = False
		end if
  
  end function
  
	'----------------------------------------------------------------------------------------------------------------------------------------
	'### NODE CONTROL ####'
  
	'Obtener el wnd'
	Public Function getWND() 
		set getWND = WND
	End Function

	public sub setWND(TNTObj)
		set WND = TNTObj
	end sub 

	public Sub setPrincipalWindow()
			
		set WND = TNT.Process("MiddlewareClientWin32").Window("HwndSource: PrincipalWindow")

		if WND is nothing then
			FunctionStatus = " Error : PrincipalWindow no Encontrado."
			
			Log.Warning FunctionStatus
		else
			FunctionStatus = " Exitoso : PrincipalWindow Encontrado."
			Log.Message FunctionStatus
		end if
		FunctionStatus = ""	
	End Sub
	
	public Sub setNode(objProperty)
  
		set WND = WND.WaitNode(objProperty,UTIL.getTimeOut)
    if WND is nothing then
			FunctionStatus = "Error: Node: " & objProperty & " no encontrado"
			
			Log.Warning FunctionStatus
		else
			FunctionStatus= "Exitoso : Node " & objProperty & " encontrado"
			Log.Message FunctionStatus
		end if
		FunctionStatus = ""

	End Sub 

	public Sub setNodeFromProcess(objProperty)
		FunctionString = ObjProperty

		
		set WND = TNT.Process("MiddlewareClientWin32").WaitNode(FunctionString,UTIL.getTimeOut)

		if WND is nothing then
			FunctionStatus = "Error: Node: " & objProperty & " no encontrado"
			
			Log.Warning FunctionStatus
		else
			FunctionStatus= "Exitoso : Node " & objProperty & " encontrado"
			Log.Message FunctionStatus
		end if
		FunctionStatus = ""
	End Sub
	
	'------------------------------------------------------------------------------------------------------------------------------------------
	'########################'
	'Click, set, get', Wait###
	'#########################'
	'------------------------------------------------------------------------------------------------------------------------------------------
	Public Function waitObj(objProperty,strAction)
			
		FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty & ",Enabled:=True"
		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is Nothing then
			FunctionStatus = "[Existoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
			waitObj = True
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionAction & ": " & FunctionStatus
			
			waitObj = False
		end if

	end Function

  
  Public Function existObjFromProcess(objProperty,strAction,timeOut)
			
		FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = objProperty & ",Enabled:=True"
		
		if TNT.Process("MiddlewareClientWin32").waitObjExist(FunctionString,timeOut) then
			FunctionStatus = "[Existoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
			existObjFromProcess = True
		else
			FunctionStatus = "[No Encontrado] "
			Log.Message FunctionAction & ": " & FunctionStatus
			existObjFromProcess = False
		end if

	end Function
  
  
	public Function getText(ObjProperty,strAction)
		FunctionAction = strAction
		FunctionValue = "-"
		FunctionString = ObjProperty & ",Enabled:=True"
		
		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.FindObject(FunctionString)
			getText = obj.get_Text
			FunctionOutput = obj.get_Text
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionAction & ": " & FunctionStatus
			
		end if
	end Function
	
	public sub setText(ObjProperty,strAction,vTxt)
		FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = ObjProperty & ",Enabled:=True"
		
		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.FindObject(FunctionString)
			obj.setText vTxt
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionAction & ": " & FunctionStatus
			
		end if
	end Sub
	
	Public sub clickObj(objProperty,strAction)
			
		FunctionAction = strAction
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = ObjProperty & ",Enabled:=True"
		if not WND.waitObject(FunctionString,UTIL.getTimeOut) is nothing then
			set obj = WND.FindObject(FunctionString)
      obj.setFocus
			obj.click
			FunctionStatus = "[Exitoso]"
			Log.Message FunctionAction & ": " & FunctionStatus
		else
			FunctionStatus = "[Error] "
			Log.Warning FunctionAction & ": " & FunctionStatus
		end if
	end sub
  
  public Sub GridControl_Dbl_StaticRow(objProperty,strAction,strColumn,strOption)

    FunctionAction = strAction
    FunctionValue = strOption
    FunctionOutput = "-"
    FunctionString = objProperty
    
    if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
      set obj = WND.FindObject(FunctionString)

      columns = obj.wColumnCount - 1
      rows = obj.wRowCount - 1

      For i = 0 To columns

        if obj.wColumn(i) = strColumn then

          obj.DblClickCell strOption,strColumn
          FunctionStatus = "[Exitoso]"
          Log.Message FunctionAction & ": " & FunctionStatus
          Exit sub	

        end if
        if i = columns then 
          FunctionStatus = "GridControl: Columna no encontrada" 
          Log.Warning FunctionStatus
          Exit sub
        end if	
      Next
    end if
  End Sub

'Hace un click a un GridControl en la columna dada por el 5to parametro, donde el filtro es dado por el 3er parametro como Columna y '
'como opcion el 4to parametro'


  public Sub GridControl_5th_Column(objProperty,strAction,strColumn,strOption,columnClick)

  	FunctionAction = strAction
  	FunctionValue = strOption
  	FunctionOutput = "-"
  	FunctionString = objProperty

  	if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
  		set obj = WND.FindObject(FunctionString)

  		columns = obj.wColumnCount - 1
  		rows = obj.wRowCount - 1

  		Dim x

  		for a = 0 To columns
  			if obj.wColumn(a) = columnClick then
  				x = a
  				Exit for
  			end if 
  		Next

  		For i = 0 To columns

  			if obj.wColumn(i) = strColumn then
  				For k = 0 To rows
  					if obj.wValue(k,strColumn) = strOption then
  						obj.clickCell k,x
  						FunctionStatus = "[Exitoso]"
  						Log.Message FunctionAction & ": " & FunctionStatus
  						Exit sub	
  					end if
  					if k = rows then
  						FunctionStatus = "GridControl: Valor no encontrado"
  						Log.Warning FunctionStatus
  						Exit sub
  					end if

  				Next
  			end if
  			if i = columns then 
  				FunctionStatus = "GridControl: Columna no encontrada" 
  				Log.Warning FunctionStatus
  			Exit sub
  			end if	
  		Next
  	end if
  End Sub

  public Sub GridControl_5th_Column_dblClick(objProperty,strAction,strColumn,strOption,columnClick)

  	FunctionAction = strAction
  	FunctionValue = strOption
  	FunctionOutput = "-"
  	FunctionString = objProperty

  	if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
  		set obj = WND.FindObject(FunctionString)

  		columns = obj.wColumnCount - 1
  		rows = obj.wRowCount - 1

  		Dim x

  		for a = 0 To columns
  			if obj.wColumn(a) = columnClick then
  				x = a
  				Exit for
  			end if 
  		Next

  		For i = 0 To columns

  			if obj.wColumn(i) = strColumn then
  				For k = 0 To rows
  					if obj.wValue(k,strColumn) = strOption then
  						obj.DblClickCell k,x
  						FunctionStatus = "[Exitoso]"
  						Log.Message FunctionAction & ": " & FunctionStatus
  						Exit sub	
  					end if
  					if k = rows then
  						FunctionStatus = "GridControl: Valor no encontrado"
  						Log.Warning FunctionStatus
  						Exit sub
  					end if

  				Next
  			end if
  			if i = columns then 
  				FunctionStatus = "GridControl: Columna no encontrada" 
  				Log.Warning FunctionStatus
  			Exit sub
  			end if	
  		Next
  	end if
  End Sub


  public Function GetGridControl_5th_Column(objProperty,strAction,strColumn,strOption,columnGet)

  	FunctionAction = strAction
  	FunctionValue = strOption
  	FunctionOutput = "-"
  	FunctionString = objProperty

  	if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
  		set obj = WND.FindObject(FunctionString)

  		columns = obj.wColumnCount - 1
  		rows = obj.wRowCount - 1

  		Dim x

  		for a = 0 To columns
  			if obj.wColumn(a) = columnGet then
  				x = a
  				Exit for
  			end if 
  		Next

  		For i = 0 To columns

  			if obj.wColumn(i) = strColumn then
  				For k = 0 To rows
  					if Trim(obj.wValue(k,strColumn)) = Trim(strOption) then
  						'obj.clickCell k,x
              GetGridControl_5th_Column = obj.wValue(k,x)
  						FunctionStatus = "[Exitoso]"
  						Log.Message FunctionAction & ": " & FunctionStatus
  						Exit Function	
  					end if
  					if k = rows then
  						FunctionStatus = "GridControl: Valor no encontrado"
  						Log.Warning FunctionStatus
  						Exit Function
  					end if

  				Next
  			end if
  			if i = columns then 
  				FunctionStatus = "GridControl: Columna no encontrada" 
  				Log.Warning FunctionStatus
  			Exit Function
  			end if	
  		Next
  	end if
  End Function
  
  public sub SetGridControl(objProperty,strAction,strColumn,RowNum,StrValue)

		FunctionAction = strAction
		FunctionValue = strOption
		FunctionOutput = "-"
		FunctionString = objProperty

		if not (WND.waitObject(FunctionString,UTIL.getTimeOut)) is nothing then
			set obj = WND.FindObject(FunctionString)

			columns = obj.wColumnCount - 1
			rows = obj.wRowCount -1

			For i = 0 To columns

				if Trim(obj.wColumn(i)) = Trim(strColumn) then

					For k = 0 To rows
				          
						if k = RowNum then
							obj.wValue(k,obj.wColumn(i)) = StrValue
							FunctionStatus = "[Exitoso]"
							Log.Message FunctionAction & ": " & FunctionStatus
							Exit sub
						end if

					if k = rows then
						FunctionStatus = "GridControl: Valor no encontrado"
 						Log.Message FunctionStatus
						Exit sub
					end if

					Next
				end if
			if i = columns then 
				FunctionStatus =  "GridControl: Columna no encontrada" 
				Log.Warning FunctionStatus
				Exit sub
			end if	
			Next
		end if
    
	End sub


	'-----------------------------------------------------------------------'
	'-----------------------------------------------------------------------'
	'-----------------------------------------------------------------------'
  Private Sub tabDict
  		Set Tabs = CreateObject("Scripting.Dictionary")

  		Tabs.Add "ORDENES", "41300E8B-56DC-47D5-9431-44823A31172A"
      Tabs.Add "ACTUALIZACION","935829B1-99D7-462C-B319-CDA8CF88B2CD"
  		Tabs.Add "ACEPTACION", "59D25A30-41F5-4F61-A445-6E5D7C4FE196"
  		Tabs.Add "PROGRAMACION", "A8DD7FE8-1549-4254-8FA5-57BF6341A2A6"
      Tabs.Add "PROGRAMACIONLTABLIN","1E4FD692-95A6-4518-B285-9B90E36C5CC5"
  		Tabs.Add "SEGUIMIENTO", "04C7DBAE-F97B-4C5A-AE5B-508389FB2679"
  		Tabs.Add "ADMINISTRACION", "458079E2-0AE7-4F4A-A087-F17DDAF38107"
  		Tabs.Add "PROGRAMACIONTAB", "1E4FD692-95A6-4518-B285-9B90E36C5CC5"
  		Tabs.Add "CHURUBUSCO", "A59D733A-ECF9-444E-A552-955D4587CE8E"
  		Tabs.Add "PRODUCCION", "A615E84A-2A43-4159-9D7F-394246EFC262"
      Tabs.Add "PRODUCCIONMA", "733D7D2C-75B8-4ECD-9B14-CAB7AE6DB341"
  		Tabs.Add "PRODUCCIONTAB", "733D7D2C-75B8-4ECD-9B14-CAB7AE6DB341"
      Tabs.Add "PRODUCTO", "CD31048A-91DF-4E36-BD44-9D20633EE3B7"
  		Tabs.Add "EMBALAJE", "F97CFB07-2F14-495F-8F8C-678AEBDED757"
  		Tabs.Add "DESPACHO", "864D413F-1F62-4456-92F8-B7AFEBB5DCFD"
  		Tabs.Add "CAMION", "BDD63A1B-5226-4040-AAD8-B43776E65A7C" 
  		Tabs.Add "GENERAL", "80F75020-C475-44D7-A7C5-BA5D7029E955"   
  		Tabs.Add "PROGRAMACIONDESPACHO", "1DBED322-640E-471C-945C-8BF2742D6AF2"
  		Tabs.Add "STOCK", "806FBC74-BA42-49DE-9365-ED99937D89AA"    
  		Tabs.Add "INVENTARIO", "10C64031-30C7-4EBD-BE89-5CB466B49F49"
  		Tabs.Add "CALIDAD", "A98FC6F2-6455-4B85-B460-91753E6B270E"
  		Tabs.Add "DICTAMEN", "AE84092F-694E-4D00-B722-5F75F1A45E5E"
  		Tabs.Add "TRASLADOS", "C663C364-B472-4261-96F8-1368FF94AF1F"
  		Tabs.Add "DESPACHOS", "3B23EF6F-2F9C-4189-80DA-27B99B537F3D"
  		Tabs.Add "CAMION_DPCHO", "273EC1A3-61AD-40C7-B989-AA5E0CD96CC2"
  		Tabs.Add "TREN", "767B577D-75BA-4474-A803-6409F8B93731"
  		Tabs.Add "MUESTRAS","BED0296F-D8AD-47EE-B121-D276DDF515ED"
  		Tabs.Add "LABORATORIO", "30871475-818A-489A-BA7F-6DED4351DAA9"
      Tabs.Add "CERTIFICADOS", "D7AA8699-E013-4249-B89F-72724BD6F794"
  		Tabs.Add "VUELTACICLO", "C6D356AB-04CC-44E1-89CE-CA4ED1577FAE"
      Tabs.Add "REASIGNACION","EEA5C6CA-F850-4058-8735-443D9F028778"
      Tabs.Add "ORDERDRESSINGOD","D08A24E9-6647-44BA-9527-61A397F145A0"
      Tabs.Add "RECEPCION","2DFBC20A-F568-40F8-A0EE-EF4829869AFD"
      Tabs.Add "OP","55B6466E-597D-43A8-8636-623575B5F1E5"
    
  		Log.Message "Se inicio Dictionary."
    
  End sub
  
  Public Sub Login
  
		FunctionAction = "Inicio de sesion en middleware"
		FunctionValue = "-"
		FunctionOutput = "-"
		FunctionString = "-"

		Dim strUsuario  : strUsuario  = Project.Variables.LoginData.Value("Usuario")
		Dim strClave    : strClave    = Project.Variables.LoginData.Value("Password")
		Dim strAmbiente : strAmbiente = Project.Variables.LoginData.Value("URL")
    
		Cerrar
     
		'Runs the "MiddlewareClientWin32" tested application.
    Delay(10000)
		Call TestedApps.MiddlewareClientWin32.Run
		Delay(10000)
    
		TNT.Process("MiddlewareClientWin32").WPFObject("cmbUsuario").Text = strUsuario
		TNT.Process("MiddlewareClientWin32").WPFObject("txtClave").wText = strClave
		TNT.Process("MiddlewareClientWin32").WPFObject("cmbAmbiente").Text = strAmbiente
		TNT.Process("MiddlewareClientWin32").WPFObject("LoginButtom").Click
    
    Delay(40000)
		Log.Message FunctionAction & " [Exitoso]"    
    
    set MainMenu = Sys.Process("MiddlewareClientWin32").WPFObject("HwndSource: PrincipalWindow").WinFormsObject("WinFormsAdapter", "").WinFormsObject("DesktopIntegradoControl").WinFormsObject("panelContenedor").WinFormsObject("DesktopContainer", "")
    MainMenu.Click 47,46
    MainMenu.Click 70,80
              
  End Sub
  
  
End Class