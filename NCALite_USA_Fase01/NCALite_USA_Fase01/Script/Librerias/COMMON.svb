'USEUNIT KERNEL
'USEUNIT TEDI

Dim UTIL

if not isobject(UTIL) then
  Set UTIL = New Class_UTIL
end if

Class Class_UTIL
  
  Public FilePath
  Public ExcelSheet
  Private StarTimer
  Public GlobalTime
  
  Public sub msj
        Log.Message "common.util"
    end sub 
    
    Public Function getInstance
        set getInstance = new Class_UTIL
    end Function 

    public Function getTimeOut
        getTimeOut = 300 '300
    end Function 

    public Function LoadDWH(Path,id,value)
        
        Dim xml
        Dim exist
        Dim vare

        Dim objFolder
        Dim colFiles
        Dim objFile
        Dim objFSO
        Dim Subfolder
        Set objFSO = CreateObject("Scripting.FileSystemObject")
        Set objFolder = objFSO.GetFolder(Path)
        Set colFiles = objFolder.Files

        For Each objFile in colFiles
            if UCase(objFSO.GetExtensionName(objFile.name)) = "XML" then

                Dim objTextS
                Set objTextS = objFSO.OpenTextFile(objFile.Path, 1)

                xml = objTextS.ReadAll

                Dim contains : contains = id &"="& """" & value & """ " 

                'Log.Message contains

                exist = InStr(xml,contains)

                if (exist<>0) then
                    Log.Message "Nombre del archivo: " & objFile.name
                    LoadDWH = xml
                else
                    vare = "-"
                end if

            end if 
        next

        LoadDWH = vare
        
    end Function

    public Function checkDWH(xml,id,value)

        Dim contains : contains = id &"="& """" & value & """ "
    
        Log.Message contains

        exist = InStr(xml,contains)

        if (exist<>0) then
            checkDWH = True
        else
            checkDWH = False
        end if

    end Function
  '----
  ' Nombre: GetData
  ' Descripción: Tomar el valor de la primer fila de una columna en Excel.
  '----
  
  'No funciono 
  public sub setRange(Range1,Range2,valor1,valor2)
  
    Set oExcel = CreateObject("Excel.Application")
  	Set oWorkbook = oExcel.Workbooks.Open(FilePath,,True) 
  	Set oSheet = oExcel.Sheets(ExcelSheet)
    oSheet.Range(Range1).Value = valor1
    oSheet.Range(Range2).Value = valor2    
  end sub
  
  
  Public Function GetDataRows(Column,Index)
	
    Column = UCase(Column) 
    'Log.Message "Path: " & FilePath
    'Log.Message "Hoja: " & ExcelSheet
  
    'Open the Excel
  	Set oExcel = CreateObject("Excel.Application")
  	Set oWorkbook = oExcel.Workbooks.Open(FilePath,,True) 
      'Set oSheet = oExcel.Sheets(strSheet)
  	Set oSheet = oExcel.Sheets(ExcelSheet) 
      'Validación si la Hoja no existe
      '####################################
  	If oSheet Is Nothing Then  
  		oExcel.DisplayAlerts = False
  		oWorkbook.Close False
  		oExcel.Quit
  		  'Detener la ejecución de los scripts
  		  Log.Error "Sheet Not Found: La hoja " & vSheet & " No se encontro en el Excel Especificado"
  	End If
  	'####################################
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(1, iC).Value

      If ColumnName = Column Then
        CellValue = oSheet.Cells(Index, iC).Value
        'Validar que la celda no este vacia
''''        If CellValue = "" Then
''''          Log.Message "Empty Cell: El valor de la columna " & Column & " esta vacia."
''''        End If
        GetDataRows = CellValue
        Exit For
      End If
    
      If iC = iCols Then
        Log.Warning "Column Not Found: La columna " & Column & " no se encontro en el Excel indicado"
      End If
    
    Next
  
    oWorkbook.Close False
	  oExcel.Quit
  
  End Function
  
  Public Sub WriteDataIndex(Column,strValue,IndexEncabezado,IndexRegistro)
    
    Column = UCase(Column)
    
    'Open the Excel
  Set oExcel = CreateObject("Excel.Application")
  Set oWorkbook = oExcel.Workbooks.Open(FilePath) 
    'Set oSheet = oExcel.Sheets(strSheet)
   Set oSheet = oExcel.Sheets(ExcelSheet)
  
    'Validación si la Hoja no existe
    '####################################
   If oSheet Is Nothing Then  
    oExcel.DisplayAlerts = False
    oWorkbook.Close False
    oExcel.Quit
      'Detener la ejecución de los scripts
      Log.Error "Sheet Not Found: La hoja " & vSheet & " No se encontro en el Excel Especificado"
   End If  
  
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
  
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(IndexEncabezado, iC).Value  
     
      If ColumnName = Column Then
       oSheet.Cells(IndexRegistro, iC).Value =  strValue
       Exit For     
      End If
    
      If iC = iCols Then
        'Agregar nueva variable
        iCols = iCols+1
        oSheet.Cells(IndexEncabezado, iCols).Value =  Column
        oSheet.Cells(IndexRegistro, iCols).Value =  strValue
        Exit For
      End If
    
    Next
   
    oWorkbook.Save 
    oWorkbook.Close False
    oExcel.Quit
  
  End Sub
  
  
  '///////////////////////////////////////////////////////////////////
  
  Public Function GetData(Column)
	
    Column = UCase(Column) 
    'Log.Message "Path: " & FilePath
    'Log.Message "Hoja: " & ExcelSheet
  
    'Open the Excel
  	Set oExcel = CreateObject("Excel.Application")
  	Set oWorkbook = oExcel.Workbooks.Open(FilePath,,True) 
      'Set oSheet = oExcel.Sheets(strSheet)
  	Set oSheet = oExcel.Sheets(ExcelSheet) 
      'Validación si la Hoja no existe
      '####################################
  	If oSheet Is Nothing Then  
  		oExcel.DisplayAlerts = False
  		oWorkbook.Close False
  		oExcel.Quit
  		  'Detener la ejecución de los scripts
  		  Log.Error "Sheet Not Found: La hoja " & vSheet & " No se encontro en el Excel Especificado"
  	End If
  	'####################################
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(1, iC).Value

      If ColumnName = Column Then
        CellValue = oSheet.Cells(2, iC).Value
        'Validar que la celda no este vacia
        If CellValue = "" Then
          Log.Error "Empty Cell: El valor de la columna " & Column & " esta vacia."
        End If
        GetData = CellValue
        Exit For
      End If
    
      If iC = iCols Then
        Log.Error "Column Not Found: La columna " & Column & " no se encontro en el Excel indicado"
      End If
    
    Next
  
    oWorkbook.Close False
	  oExcel.Quit
  
  End Function
  
  Public Sub WriteDataRows(Column,strValue,Index)
    
    Column = UCase(Column)
    
    'Open the Excel
  Set oExcel = CreateObject("Excel.Application")
  Set oWorkbook = oExcel.Workbooks.Open(FilePath) 
    'Set oSheet = oExcel.Sheets(strSheet)
   Set oSheet = oExcel.Sheets(ExcelSheet)
  
    'Validación si la Hoja no existe
    '####################################
   If oSheet Is Nothing Then  
    oExcel.DisplayAlerts = False
    oWorkbook.Close False
    oExcel.Quit
      'Detener la ejecución de los scripts
      Log.Error "Sheet Not Found: La hoja " & vSheet & " No se encontro en el Excel Especificado"
   End If  
  
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
  
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(1, iC).Value  
     
      If ColumnName = Column Then
       oSheet.Cells(Index, iC).Value =  strValue
       Exit For     
      End If
    
      If iC = iCols Then
        'Agregar nueva variable
        iCols = iCols + 1
        oSheet.Cells(1, iCols).Value =  Column
        oSheet.Cells(Index, iCols).Value =  strValue
        Exit For
      End If
    
    Next
   
    oWorkbook.Save 
    oWorkbook.Close False
    oExcel.Quit
  
  End Sub
  
  
  '----
  ' Nombre: WriteData
  ' Descripción: Escribe el valor indicado en la ruta indicada
  '----
  Public Sub WriteData(Column,strValue)
    
    Column = UCase(Column)
    
    'Open the Excel
  Set oExcel = CreateObject("Excel.Application")
  Set oWorkbook = oExcel.Workbooks.Open(FilePath) 
    'Set oSheet = oExcel.Sheets(strSheet)
   Set oSheet = oExcel.Sheets(ExcelSheet)
  
    'Validación si la Hoja no existe
    '####################################
   If oSheet Is Nothing Then  
    oExcel.DisplayAlerts = False
    oWorkbook.Close False
    oExcel.Quit
      'Detener la ejecución de los scripts
      Log.Error "Sheet Not Found: La hoja " & vSheet & " No se encontro en el Excel Especificado"
   End If  
  
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
  
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(1, iC).Value  
     
      If ColumnName = Column Then
       oSheet.Cells(2, iC).Value =  strValue
       Exit For     
      End If
    
      If iC = iCols Then
        'Agregar nueva variable
        iCols = iCols+1
        oSheet.Cells(1, iCols).Value =  Column
        oSheet.Cells(2, iCols).Value =  strValue
        Exit For
      End If
    
    Next
   
    oWorkbook.Save 
    oWorkbook.Close False
    oExcel.Quit
  
  End Sub
  
 '----
  ' Nombre: WriteData Vertical 
  ' Descripción: Escribe el valor indicado en la ruta indicada
  '----
  Public Sub WriteDataVertical(Column,strValue,rowNumber)
    
    Column = UCase(Column)
    
    'Open the Excel
	Set oExcel = CreateObject("Excel.Application")
	Set oWorkbook = oExcel.Workbooks.Open(FilePath) 
    'Set oSheet = oExcel.Sheets(strSheet)
	Set oSheet = oExcel.Sheets(ExcelSheet)
  
    'Validación si la Hoja no existe
    '####################################
   If oSheet Is Nothing Then  
    oExcel.DisplayAlerts = False
    oWorkbook.Close False
    oExcel.Quit
      'Detener la ejecución de los scripts
      Log.Error "Sheet Not Found: La hoja " & Sheet & " No se encontro en el Excel Especificado"
   End If  
  
    'Tomar el total de Columnas en el Excel
    iCols = oSheet.UsedRange.Columns.Count
  
    For iC = 1 to iCols 
      ColumnName = oSheet.Cells(1, iC).Value  
     
      If ColumnName = Column Then
       oSheet.Cells(rowNumber, iC).Value =  strValue
       Exit For     
      End If
    
      If iC = iCols Then
        'Agregar nueva variable
        iCols = iCols+1
        oSheet.Cells(1, iCols).Value =  Column
        oSheet.Cells(2, iCols).Value =  strValue
        Exit For
      End If
    
    Next
   
    oWorkbook.Save 
    oWorkbook.Close False
    oExcel.Quit
  
  End Sub

  
  '----
  ' Nombre: StarTime
  ' Descripción: Inicializa el contador de tiempo.
  '----
  Public Sub StarTime()
  
    StarTimer = Timer

  End Sub
  
 '----
  ' Nombre: CerrarProcesoExcel
  ' Descripción:Cierra todos los procesos de Excel activos.
  '---- 
  Sub CerrarProcesoExcel
    strComputer = "."
    SET objWMIService = GETOBJECT("winmgmts:" _
	    & "{impersonationLevel=impersonate}!\\" _ 
	    & strComputer & "\root\cimv2") 

    SET colProcess = objWMIService.ExecQuery _
	    ("Select * from Win32_Process Where Name = 'EXCEL.EXE'")
      count = 0
      
    FOR EACH objProcess in colProcess
	    objProcess.Terminate()
	    count = count + 1
    NEXT 
    log.message "Se terminaron " & count & " Instancias de Excel " 

End Sub
  
  '----
  ' Nombre: BreakTime
  ' Descripción: Detiene el contador de tiempo e Imprime en Log.
  ' TODO: Arreglar el manejo correcto de los minutos y segundos
  '----
  Public Sub BreakTime(MsgLog)

    Break = Timer
  
    SubTime = (CStr(Break - StarTimer))/60
        
    PuntoDCM = InStr(SubTime,".")
    
    iMinuto = Left(SubTime,PuntoDCM-1)
    
    iSegundo = Mid(SubTime,PuntoDCM)
        
    iSegundo = CDbl(iSegundo)
    
    iSegundo = iSegundo*60
    
    iSegundo = CInt(iSegundo)
  
    Log.Message "##### Termina: " & MsgLog & " | Tiempo de Ejecucción: " & iMinuto & " Minutos " & iSegundo & " Segundos #####"  
  
  End Sub

  '----
  ' Nombre: EndTime
  ' Descripción: Detiene el contador de tiempo global e imprime en Log el timepo trascurrido.
  'TODO: Arreglar el manejo correcto de los minutos y segundos
  '----
  Public Sub EndTime
  
    EndTimer = Timer
  
    TotalTime = (CStr(EndTimer - GlobalTime))/60
    
    PuntoDCM = InStr(TotalTime,".")
    
    iMinuto = Left(TotalTime,PuntoDCM-1)
    
    iSegundo = Mid(TotalTime,PuntoDCM)
        
    iSegundo = CDbl(iSegundo)
    
    iSegundo = iSegundo*60
    
    iSegundo = CInt(iSegundo)
    
    Log.Message "##### Tiempo Total de Ejecución: " & iMinuto & " Minutos " & iSegundo & " Segundos #####"
  
  End Sub
  
  '----
  ' Nombre: UniqueString12
  ' Descripción: Regresa una cadena de 12 caracteres en base al la fecha actual, formato: YYYMMDDHHmm
  '----
  Public Function UniqueString12()
    Dim t 
    t = Now
	  UniqueString12 = Year(t) & Right("0" & Month(t),2) & Right("0" & Day(t),2) & Right("0" & Hour(t),2) & Right("0" & Minute(t),2)  
  End Function
  
  Public Function UniqueString1()
    Dim t 
    t = Now
	  UniqueString1 = Right(Second(t),2)
  End Function 
  
  Public Function UniqueString2()
    Dim t 
    t = Now
	  UniqueString2 = Right(Minute(t),1) & Right(Second(t),2) & Right(Hour(t),1)  
  End Function 
  
  Public Function UniqueString3()
    Dim t 
    t = Now
	  UniqueString3 = Right(Second(t),2) & Right(Minute(t),1)   
  End Function
  
  Public Function UniqueString4()
    Dim t 
    t = Now
	  UniqueString4 = Right(Hour(t),1) & Right(Minute(t),3)   
  End Function
  
  Public Function UniqueString5()
    Dim t 
    t = Now
	  UniqueString5 = Right(Hour(t),1) & Right(Minute(t),2) & Right(Second(t),2)  
  End Function
  
  Public Function UniqueString7()
    Dim t 
    t = Now
	  UniqueString7 =  Right(Hour(t),1)& Year(t) & Right(Minute(t),1)
  End Function
  
  Public Function UniqueString9()
    Dim t 
    t = Now
	  UniqueString9 = Right(Hour(t),1) & Right(Minute(t),3) & Right(Second(t),2) & Right(Second(t),3)  
  End Function
  
  Public Function UniqueString10()
    Dim t 
    t = Now
	  UniqueString10 =  Year(t) & Right("0" & Day(t),2) & Right("0" & Second(t),2) & Right("0" & Minute(t),2)  
  End Function
  
  
  
   
  '----
  ' Nombre: FechaActualDMY
  ' Descripción: Regresa una cadena de 12 caracteres en base al la fecha actual, formato: DDMMYYYY
  '----
  Public Function FechaActualDMY()
    Dim t 
    t = Now
	  FechaActualDMY = Day(t)& "/" & Right("0" & Month(t),2) & "/" & Right("0" & Year(t),4)   
  End Function
  
  '----
  ' Nombre: FechaNCAALTA
  ' Descripción: Regresa una cadena de 12 caracteres en base al la fecha actual, formato: YYMMDDHHmmss
  '----
  Public Function FechaNCAAlta()
    Dim t 
    t = Now
	  FechaNCAAlta = Right ("0" & Year(t),2) & Right("0" & Month(t),2) & Right("0" & Day(t),2)& " " & Right("0" & Hour(t),2) & Right("0" & Minute(t),2) & Right("0" & Second(t),2)  
  End Function
  
  
  '----
  ' Nombre: FechaProduccion
  ' Descripción: Regresa una cadena en base al la fecha actual, formato: YYYY-MM-DD HH:mm:SS.sss
  '----
  '2017-03-16 04:56:00.000
  Public Function FechaProduccion()
    Dim t 
    t = Now
	  FechaProduccion = Year(t) & "-" & Right("0" & Month(t),2) & "-" & Right("0" & Day(t),2) & " " & Right("0" & Hour(t),2) & ":" & Right("0" & Minute(t),2) & ":00.000" 
  End Function
  
  '----
  ' Nombre: GetDate
  ' Descripción: Regresa una cadena en base al la fecha actual, formato: YYYY-MM-DD
  '----
  Public Function GetDate()
	  Dim t 
    t = Now
	  GetDate = Year(t) & "-" & Right("0" & Month(t),2) & "-" & Right("0" & Day(t),2)
  End Function
  
  '----
  ' Nombre: EjecuteQuery
  ' Descripción: Realiza una consulta a la base de datos indicada, con el usuario y contraseña indicado. 
  '----TODO: Manejo de usuario y contraseña por parametros, para la base de datos. TODAY
  public Function NCALiteSQl(v_sql,Column)
  
    Dim oCon 
    Set oCon = CreateObject("ADODB.Connection")
    Dim oRs
    Set oRs  = CreateObject("ADODB.Recordset")

    conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=DMLNCALITE;Password=a_u0H_cq5.XdS;Data Source=TERAZNCADB03.ternium.techint.net:1253/ncaltedev.ternium.techint.net"
      
    oCon.Open conn
    Set oRs = oCon.Execute(v_sql)
    
'    AllRows = oRs.getRows
'    NCALiteSQL = AllRows(Column,Second(Now))
    NCALiteSQl = oRs.Fields(Column).Value 
    
    oCon.Close
    Set oRs = Nothing
    Set oCon = Nothing

  end function
  
  Public Function EjecuteQuery(v_sql,Column,amb)

    Dim oCon 
    Set oCon = CreateObject("ADODB.Connection")
    Dim oRs
    Set oRs  = CreateObject("ADODB.Recordset")

    if amb = "NORTE" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan.ternium.techint.net:1521/tespimx.ternium.techint.net"
      end if
      
    if amb = "SUR" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan:1521/NCAPIAR.ternium.techint.net"
    end if
      
    oCon.Open conn
    Set oRs = oCon.Execute(v_sql)
    
    AllRows = oRs.getRows
    EjecuteQuery = AllRows(Column,Second(Now))
'    EjecuteQuery = oRs.Fields(Column).Value
    
    oCon.Close
    Set oRs = Nothing
    Set oCon = Nothing
      
  End Function
  
  '----
  ' Nombre: GetXMLNode
  ' Descripción: Regresa el texto del nodo indicado del XML.
  ' Parametros:
  '   strXML: XML de donde se tomara el valor del nodo.
  '   strQuery: Nodo del que se tomara el valor indicado, siguien el formato de "//NombreDelNodo"
  '----
  Public Function GetXMLNode(strXML,strQuery)
    Dim objXML: Set objXML  = CreateObject("MSXML2.DOMDocument")
    objXML.loadXML (strXML)
    GetXMLNode = objXML.selectSingleNode(strQuery).Text
  End Function
  
  '----
  ' Nombre: VerifyNode
  ' Descripción: Verifica el texto del nodo indicado en el XML. respondiendo True o False dependiendo el caso.
  ' Parametros:
  '   strXML: XML de donde se tomara el valor del nodo.
  '   strQuery: Nodo del que se tomara el valor indicado, siguien el formato de "//NombreDelNodo"
  '   strValue: Valor esperado del nodo.
  '----
  Public Function VerifyNode(strXML,strQuery,strValue)
    On Error Resume Next
    
    result = GetXMLNode(strXML,strQuery)
  
    If strValue = result Then
  	  VerifyNode = True
  	Else
  	  VerifyNode = False
  	End If
    On Error Goto 0
  End Function
  
  '----
  ' Nombre: RefreshExcel
  ' Descripcion: Abre y cierra el Excel especificado, con el objetivo de actualizar el valor de las celdas dinamitas.
  '----
  Public Sub RefreshExcel
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = True
	Set wbLibro = objExcel.WorkBooks.Open(TEDDI.GetValue("ExcelOFA"))
	With wbLibro
		'.WorkSheets(1).Cells(1,1).Value= strNombre
		.Save
		.Close
		set var =createobject("wscript.shell")
		delay(1000)
		var.sendkeys "{ENTER}"
	End With
	objExcel.Quit
	Set wbLibro = Nothing
	Set objExcel = Nothing
  End Sub
  
	'----
	' Nombre: SaveNodes
	' Descripcion:
	'----
  Public Sub SaveNodes(StrXML,strNode,strVarSaved)
	
		Set XMLElementosQuimicos = CreateObject ("MSXML2.DOMDocument")
		
		XMLElementosQuimicos.loadXML (StrXML)
		
		Set ListElementosQuimicos = XMLElementosQuimicos.selectNodes("//" & strNode) 'codigoElementoQuimico")
		
		ListItems = ListElementosQuimicos.length
		
		'Log.message "Numero de Nodos: " & ListItems
		
		TEDDI.AddValue("SavedNodesCount") = ListItems
		
		
		For i = 0 To ListItems -1
			Set NodeText = ListElementosQuimicos.item(i)
		
			tempElementoQuimico = NodeText.text
			
			TEDDI.AddValue(strVarSaved & i) = tempElementoQuimico
			
			'log.message TEDDI.GetValue(strVarSaved & i)
			
			Set NodeText = Nothing
		Next
		
		Set XMLElementosQuimicos = Nothing
		Set ListElementosQuimicos = Nothing
	
	End Sub
	
	'----
	' Nombre: CalculateElementoQuimico
	' Descripcion:
	'----
	Public Sub CalculateElementoQuimico(strVar1,strVar2)
		tempCiclo = TEDDI.GetValue("SavedNodesCount")
		For i = 0 To tempCiclo -1
			TempValue1 = TEDDI.GetValue(strVar1 & i)
			TempValue1 = CDbl(TempValue1)
			TempValue2 = TEDDI.GetValue(strVar2 & i)
			TempValue2 = CDbl(TempValue2)
			
			If TempValue1 > 50 Then
				TempValue1 = TempValue2 * 2
				TempValue3 = (TempValue1 + TempValue2)/2
			Else
				TempValue3 = (TempValue1 + TempValue2)/2
			End If
			
			TempValue3 = CStr(TempValue3)
			
			If TempValue3 = "0" Then
				TempValue3 = TempValue3 & "."
			End If
			
			strLen = Len(TempValue3)
			
			Do Until (strLen = 7)
				TempValue3 = TempValue3 & "0"
				strLen = Len(TempValue3)
			Loop
			
			TempValue3 = Replace(TempValue3,".",",")
			
			TEDDI.AddValue("ValueDisenioCalculado" & i) = TempValue3
			'Log.message "Valor ya calculado: " & TEDDI.GetValue("ValueDisenioCalculado" & i)
		Next

	End Sub
	
	Public Function HTMLDecode( encodedstring)
		
		Dim tmp, i
		tmp = encodedstring
		tmp = Replace( tmp, "&quot;", chr(34) )
		tmp = Replace( tmp, "&lt;"  , chr(60) )
		tmp = Replace( tmp, "&gt;"  , chr(62) )
		tmp = Replace( tmp, "&amp;" , chr(38) )
		tmp = Replace( tmp, "&nbsp;", chr(32) )
		For i = 1 to 255
			tmp = Replace( tmp, "&#" & i & ";", chr( i ) )
		Next
		HTMLDecode = tmp
	
	End Function
	
	Public Function RandomNumber
		
		Dim Fecha
		Dim NumAli

		dToday = Now 
		Fecha = Right("0" & Day(dToday),2) & "" & Right("0" & Month(dToday),2)' & "" & Right("0" & Year(dToday),2)
		
		For x = 0 To 5
			Randomize
			NumAli = Int((50000 - 10000 + 10000) * Rnd + 1)
		Next
		
		RandomNumber = Fecha & NumAli
		
	End Function
  
  
  public sub ExecuteUpdateQuery(sql,amb)
  
      Set DBConn = CreateObject("ADODB.Connection")
      Set DBRecord  = CreateObject("ADODB.Recordset")
      
      amb = UCase(amb)
      
      if amb = "NORTE" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan.ternium.techint.net:1521/tespimx.ternium.techint.net"
      end if
      
      if amb = "SUR" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan:1521/tespiar.ternium.techint.net"
      end if
      
      DBConn.Open conn
      DBconn.Execute(sql)
      
      DBConn.Close
      Set DBConn = Nothing
      Set DBRecord  = Nothing
      
  end sub
  
  public function getDataQuery(sql,Column,amb)
  
      Set DBConn = CreateObject("ADODB.Connection")
      Set DBRecord  = CreateObject("ADODB.Recordset")
      
      amb = UCase(amb)
      
      if amb = "NORTE" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan.ternium.techint.net:1521/tespimx.ternium.techint.net"
      end if
      
      if amb = "SUR" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan:1521/tespiar.ternium.techint.net"
      end if
      
      DBConn.Open conn
      set DBRecord = DBConn.Execute(sql)
      getDataQuery = DBRecord.Fields(Column).Value
      
      DBConn.Close
      Set DBConn = Nothing
      Set DBRecord  = Nothing
      
      
  end function
  
  public Function getRandom_Query(sql,Column,amb)
      
      Set DBConn = CreateObject("ADODB.Connection")
      Set DBRecord  = CreateObject("ADODB.Recordset")
      
      amb = UCase(amb)
      
      if amb = "NORTE" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan.ternium.techint.net:1521/tespimx.ternium.techint.net"
      end if
      
      if amb = "SUR" then
        conn = "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=ssuser;Password=ssuser123;Data Source=tesmx-scan:1521/tespiar.ternium.techint.net"
      end if
      
      DBConn.Open conn
      DBRecord.Open sql, DBConn, adOpenStatic
      
      records = DBRecord.getRows
      
      rows =  DBRecord.RecordCount - 1 
      columns = DBRecord.Fields.Count -1 
      
      Dim ColumNo
      for i = 0 to columns
        ad = DBRecord.Fields(i).Name 
        if Column = ad then
          ColumNo = i
          Exit for
        end if
      next
      
      Randomize
      'Log.Message Rnd
      max = rows - 1
      random = Int((max-0+1)*Rnd+1)
      
      'Log.Message "r:" &rows
      'Log.Message "ran:" &random
      
      do until random <= rows
        if random <=rows then Exit Do
        random = random -1
        Log.Message "Rand n Value: " & random
      Loop
      
      getRandom_Query = records(columNo,random)
      
      DBConn.Close
      Set DBConn = Nothing
      Set DBRecord  = Nothing
      
    end Function

  
End Class
